apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        flavorDimensions "default"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
               // includeCompileClasspath = true
            }
        }
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        push {
            dimension "default"
            applicationId = "com.sunmengmeng.kotlin_base" //为了配合最初的push推送测试环境的包名，增加一个push模式这个包名与push的debug对应
        }
        app {
            dimension "default"
            applicationId = "com.sunmengmeng.kotlin_base"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
            buildConfigField("boolean", "isDebug", "false")
            manifestPlaceholders = [
                    app_name: "驾考宝典"
            ]
        }
        debug {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            //applicationIdSuffix ".atest"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
           // signingConfig signingConfigs.myrelease
            buildConfigField("boolean", "isDebug", "true")
            manifestPlaceholders = [
                    app_name: "驾考宝典测试版本"
            ]

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        if (variant.buildType.name == 'release') {
                            outputFileName = "${applicationId}-${nowTime()}_release_V${variant.versionName}.apk"
                        } else if (variant.buildType.name == 'debug') {
                            outputFileName = "${applicationId}-${nowTime()}_debug_V${variant.versionName}.apk"
                        }
                    }
            }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    //统一资源前缀，规范资源引用
    resourcePrefix "app_"
    buildFeatures {
        dataBinding = true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation project(path: ':base')
    if (!isBuildModule.toBoolean()) {
        implementation project(path: ':login')
//        implementation project(path: ':module_main')
//        implementation project(path: ':module_user')
//        implementation project(path: ':module_search')
//        implementation project(path: ':module_square')
//        implementation project(path: ':module_project')
//        implementation project(path: ':module_web')
    }
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    implementation 'androidx.core:core-ktx:1.2.0'
//    implementation 'androidx.appcompat:appcompat:1.1.0'
//    implementation 'com.google.android.material:material:1.1.0'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    testImplementation 'junit:junit:4.+'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
static def nowTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}